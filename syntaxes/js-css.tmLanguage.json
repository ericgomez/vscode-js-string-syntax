{
  "scopeName": "source.js.css",
  "injectionSelector": "L:source.js -comment -(string -meta.embedded), L:source.jsx -comment -(string -meta.embedded), L:source.js.jsx -comment -(string -meta.embedded), L:source.ts -comment -(string -meta.embedded), L:source.tsx -comment -(string -meta.embedded)",
  "patterns": [
    {
      "include": "#css-string-single"
    },
    {
      "include": "#css-string-double"
    },
    {
      "include": "#css-string-template"
    }
  ],
  "repository": {
    "css-string-single": {
      "begin": "(/\\*\\s?css\\s?\\*/)\\s*(')",
      "end": "(')",
      "beginCaptures": {
        "1": {
          "name": "comment.block.js"
        },
        "2": {
          "name": "string.quoted.single.js punctuation.definition.string.begin.js"
        }
      },
      "endCaptures": {
        "1": {
          "name": "string.quoted.single.js punctuation.definition.string.end.js"
        }
      },
      "contentName": "string.quoted.single.js",
      "patterns": [
        {
          "begin": "(?<=')",
          "end": "(?=')",
          "contentName": "source.css.embedded.js",
          "patterns": [
            {
              "include": "source.css"
            }
          ]
        }
      ]
    },
    "css-string-double": {
      "begin": "(/\\*\\s?css\\s?\\*/)\\s*(\")",
      "end": "(\")",
      "beginCaptures": {
        "1": {
          "name": "comment.block.js"
        },
        "2": {
          "name": "string.quoted.double.js punctuation.definition.string.begin.js"
        }
      },
      "endCaptures": {
        "1": {
          "name": "string.quoted.double.js punctuation.definition.string.end.js"
        }
      },
      "contentName": "string.quoted.double.js",
      "patterns": [
        {
          "begin": "(?<=\")",
          "end": "(?=\")",
          "contentName": "source.css.embedded.js",
          "patterns": [
            {
              "include": "source.css"
            }
          ]
        }
      ]
    },
    "css-string-template": {
      "begin": "(/\\*\\s?css\\s?\\*/)\\s*(`)",
      "end": "(`)",
      "beginCaptures": {
        "1": {
          "name": "comment.block.js"
        },
        "2": {
          "name": "string.template.js punctuation.definition.string.template.begin.js"
        }
      },
      "endCaptures": {
        "1": {
          "name": "string.template.js punctuation.definition.string.template.end.js"
        }
      },
      "contentName": "string.template.js",
      "patterns": [
        {
          "include": "#js-interpolation"
        },
        {
          "include": "source.css#comment-block"
        },
        {
          "include": "source.css#escapes"
        },
        {
          "include": "source.css#combinators"
        },
        {
          "include": "#selector-with-interpolation"
        },
        {
          "include": "source.css#at-rules"
        },
        {
          "include": "#rule-list-with-interpolation"
        }
      ]
    },
    "js-interpolation": {
      "begin": "(\\${)",
      "end": "(})",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.template-expression.begin.js"
        }
      },
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.template-expression.end.js"
        }
      },
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    "selector-with-interpolation": {
      "begin": "(?x)\n(?=\n  (?:\\|)?                    # Possible anonymous namespace prefix\n  (?:\n    [-\\[:.*\\#a-zA-Z_]       # Valid selector character\n    |\n    [^\\x00-\\x7F]            # Which can include non-ASCII symbols\n    |\n    \\\\                      # Or an escape sequence\n    (?:[0-9a-fA-F]{1,6}|.)\n  )\n)",
      "end": "(?=\\s*[/@{)])",
      "name": "meta.selector.css",
      "patterns": [
        {
          "include": "#js-interpolation"
        },
        {
          "include": "source.css#selector-innards"
        }
      ]
    },
    "rule-list-with-interpolation": {
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.property-list.begin.bracket.curly.css"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.property-list.end.bracket.curly.css"
        }
      },
      "name": "meta.property-list.css",
      "patterns": [
        {
          "include": "#js-interpolation"
        },
        {
          "include": "#rule-list-innards-with-interpolation"
        }
      ]
    },
    "rule-list-innards-with-interpolation": {
      "patterns": [
        {
          "include": "#js-interpolation"
        },
        {
          "include": "source.css#comment-block"
        },
        {
          "include": "source.css#escapes"
        },
        {
          "include": "source.css#font-features"
        },
        {
          "match": "(?x) (?<![\\w-])\n--\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
          "name": "variable.css"
        },
        {
          "begin": "(?<![-a-zA-Z])(?=[-a-zA-Z])",
          "end": "$|(?![-a-zA-Z])",
          "name": "meta.property-name.css",
          "patterns": [
            {
              "include": "source.css#property-names"
            }
          ]
        },
        {
          "begin": "(?<=})\\s*(?=[-a-zA-Z])",
          "end": "$|(?![-a-zA-Z])",
          "name": "meta.property-name.css",
          "patterns": [
            {
              "include": "source.css#property-names"
            }
          ]
        },
        {
          "begin": "(:)\\s*",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.key-value.css"
            }
          },
          "end": "\\s*(;)|\\s*(?=}|\\))|(?<=})(?=\\s*[-a-zA-Z])",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "contentName": "meta.property-value.css",
          "patterns": [
            {
              "include": "source.css#comment-block"
            },
            {
              "include": "#property-values-with-interpolation"
            }
          ]
        },
        {
          "match": ";",
          "name": "punctuation.terminator.rule.css"
        }
      ]
    },
    "property-values-with-interpolation": {
      "patterns": [
        {
          "include": "#js-interpolation"
        },
        {
          "include": "source.css#commas"
        },
        {
          "include": "source.css#comment-block"
        },
        {
          "include": "source.css#escapes"
        },
        {
          "include": "source.css#functions"
        },
        {
          "include": "source.css#property-keywords"
        },
        {
          "include": "source.css#unicode-range"
        },
        {
          "include": "source.css#numeric-values"
        },
        {
          "include": "source.css#color-keywords"
        },
        {
          "include": "source.css#string"
        },
        {
          "match": "!\\s*important(?![\\w-])",
          "name": "keyword.other.important.css"
        }
      ]
    }
  }
}